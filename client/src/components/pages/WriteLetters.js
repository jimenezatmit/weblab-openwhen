import React, { Component } from "react";
import { Link, navigate } from "@reach/router";
import Letter from "../modules/Letter.js";
import LetterIcon from "../modules/LetterIcon.js";
import { post, get } from "../../utilities.js";

import "../../utilities.css";
import "./WriteLetters.css";

class WriteLetters extends Component {
  constructor(props) {
    super(props);
    this.state = {
      letter_list: [], //letterObjs <Letter>
      letter_ids: [], //autogenerated id from mongo
      current_letter: null,
    };
  }

  componentDidMount() {
    document.title = "Open When: Create";

    get("/api/allletters", { package_id: this.props.location.state.package_id }).then((letters) => {
      letters.map((letter) => {
        this.setState({
          letter_list: this.state.letter_list.concat([letter]),
          letter_ids: this.state.letter_ids.concat(letter._id),
        });
      });
    });

    let listLength = this.state.letter_list.length;
    if (this.props.location.state.new_package) {
      this.setState({
        current_letter: this.createLetterObject(listLength),
      });
    }
  }

  createLetterObject = (i, letter_id = null) => {
    let sender_name = this.props.location.state.sender_name;
    let package_id = this.props.location.state.package_id;
    let recipient_email = this.props.location.state.recipient_email;

    return (
      <Letter
        package_id={package_id}
        letter_id={letter_id}
        sender_name={sender_name}
        recipient_email={recipient_email}
        complete_function={this.completeLetter}
        update_function={this.updateLetter}
        index={i}
      />
    );
  };

  completeLetter = (letter_id) => {
    console.log(letter_id);
    let listLength = this.state.letter_list.length;
    this.setState(
      {
        letter_list: this.state.letter_list.concat(this.createLetterObject(listLength, letter_id)),
        letter_ids: this.state.letter_ids.concat(letter_id),
      },
      () => console.log(this.state.letter_list),
      this.setState({ current_letter: null })
    );
  };

  updateLetter = (letter_id, index) => {
    console.log(letter_id);

    const newLetters = this.state.letter_list.slice(); // copy the array

    newLetters[index] = this.createLetterObject(index, letter_id); //execute the manipulations

    this.setState({
      letter_list: newLetters,
      current_letter: null,
    }); //set the new state
  };

  addLetter = (event) => {
    event.preventDefault();

    let listLength = this.state.letter_list.length;

    this.setState(
      {
        current_letter: this.createLetterObject(listLength),
      },
      () => console.log(this.state.current_letter)
    );
  };

  nextPage = () => {
    // console.log(this.state.letter_list);
    navigate(`/review/`, {
      state: {
        // letter_list: this.state.letter_list,
        // letter_ids: "hello",
        sender_name: this.props.location.state.recipient_email,
        recipient_email: this.props.location.state.recipient_email,
        package_id: this.props.location.state.package_id,
      },
    });
  };

  handleLetterClick = (index) => {
    console.log("IDS", this.state.letter_ids);

    this.setState(
      {
        current_letter: this.createLetterObject(index, this.state.letter_ids[index]),
      },
      () => console.log(this.state.current_letter)
    );
  };

  render() {
    let letterPile = null;
    letterPile = this.state.letter_list.map((letter, index) => (
      <LetterIcon index={index} handleClick={this.handleLetterClick}></LetterIcon>
    ));

    let addAnother = null;
    if (this.state.current_letter === null) {
      addAnother = (
        <button type="button" className="Create-button" onClick={this.addLetter}>
          add another letter
        </button>
      );
    }

    return (
      <>
        <h1 className="Create-title u-textCenter">Write Letters</h1>
        <div id="subHeading">
          choose a prompt, choose an open when date, and write a letter to your recipient
        </div>

        <div className="Write-container">
          <div className="u-textCenter">
            {this.state.current_letter}
            {/* <button type="button" className="Create-button" onClick={this.completeLetter}>
              complete
            </button> */}
          </div>
          <div>
            <div id="subHeading">your letters</div>
            {letterPile}
            {addAnother}
          </div>
        </div>
        <div className="u-textCenter">
          <button type="button" className="Create-button" onClick={this.nextPage}>
            next
          </button>
        </div>
      </>
    );
  }
}

export default WriteLetters;
